pub struct LinkedList<T> {
    head: Link<T>,
}

impl<T> LinkedList<T> {
    pub fn new(value: T) -> LinkedList<T> {
        let link = Some(Box::new(LinkNode::new(value)));
        LinkedList { head: link }
    }
    pub fn empty() -> Self {
        LinkedList { head: None }
    }
    pub fn push_front(&mut self, value: T) -> &mut Self {
      match self.head.as_ref() {
        Some(h) => {
          let new_head = LinkNode {
             value: value,
             next: Some(h),
          };
          self.head = Some(Box::new(new_head));
        },
        None => {
          self.head = Some(Box::new(LinkNode::new(value)));
        },
      }
      self
    }
}

type Link<T> = Option<Box<LinkNode<T>>>;

struct LinkNode<T> {
    value: T,
    next: Option<Box<LinkNode<T>>>,
}
impl<T> LinkNode<T> {
    fn new(value: T) -> LinkNode<T> {
        LinkNode {
            value: value,
            next: None,
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn new_it() {
        let ll = LinkedList::new(100);
    }
}
